{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GitExpertApp","ReactDOM","render","document","getElementById"],"mappings":"yMAIaA,EAAc,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAEtC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCFJO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAIvB,ECJwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkCA,OA5BAC,qBAAW,WACPxB,EAASC,GACRwB,MAAM,SAAAd,GAEHY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAQlB,CAACpB,IAcGqB,EDhC0BI,CAAczB,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,eAAC,WAAD,WAEI,6BAAMpB,IAELoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEKA,GADCA,EAAIC,aESnBe,EA1BM,WAEjB,MAAoCxC,mBAAS,CAAC,gBAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAOA,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAkBA,IAG3BS,EAAWe,KAAK,SAAAT,GAAQ,OACxB,cAAC,EAAD,CAEIA,SAAaA,GADPA,U,MCf1B2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b6b5f289.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ( { setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {        \r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2){\r\n            setCategories( categories => [ inputValue, ...categories ] );\r\n            setInputValue('');\r\n        }        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit= { handleSubmit }>            \r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }   \r\n                onChange={ handleInputChange }         \r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifs = async ( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=12&api_key=UjBpgbzPLnlxQoht9R4K5yKC7n4gn512`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs ;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeInDown'>\r\n            <img src={ url } alt={ title }></img>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Fragment } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n    \r\n    return (\r\n        <Fragment>\r\n            {/* <pre>{JSON.stringify(loading)}</pre> */}\r\n            <h3>{ category }</h3>       \r\n\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}     \r\n            <div className='card-grid'>\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                        key={ img.id }\r\n                        { ...img }\r\n                        />                              \r\n                    ))\r\n                }                        \r\n            </div>\r\n        </Fragment>\r\n        \r\n    )\r\n}\r\n","\r\nimport { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n        .then( img => { \r\n\r\n            setstate({\r\n                data: img,\r\n                loading: false                \r\n            })\r\n\r\n            // setTimeout(() => {\r\n\r\n            // }, 3000);\r\n            \r\n        })\r\n    }, [category])\r\n\r\n    // useEffect( ()=> {\r\n    // getGifs( category )\r\n    //     .then( setImages );\r\n    // }, [ category ])\r\n\r\n\r\n    // setTimeout( () => {\r\n    //     setstate({\r\n    //         data: [1,2,3,4,5,6,7,8,9,10],\r\n    //         loading: false\r\n    //     })\r\n    // }, 3000)\r\n    return state; // { data[], loading: true }\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GitExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Dragon Ball']);\r\n\r\n    // const handleAdd = () => {        \r\n    //     // setCategories([...categories, 'Super Campeones']);\r\n    //     setCategories( cats => [...cats, 'Super Campeones']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GitExpertApp</h2>    \r\n            <hr/>\r\n            <AddCategory setCategories = { setCategories } />            \r\n            \r\n            { \r\n                categories.map( category => (\r\n                <GifGrid   \r\n                    key={ category }                  \r\n                    category = { category } />\r\n                ))\r\n            }           \r\n        </> \r\n    )           \r\n}\r\n\r\nexport default GitExpertApp\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GitExpertApp from './GitExpertApp';\r\n\r\nimport './index.css';\r\n\r\n\r\nReactDOM.render(\r\n  <GitExpertApp />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}